diff --git a/aor/ar8200.c b/aor/ar8200.c
index 50c6b34..690ac7a 100644
--- a/aor/ar8200.c
+++ b/aor/ar8200.c
@@ -26,6 +26,7 @@
 #include <stdlib.h>
 
 #include <hamlib/rig.h>
+#include "idx_builtin.h"
 #include "aor.h"
 
 
@@ -114,7 +115,9 @@ const struct rig_caps ar8200_caps = {
 .has_set_level =  RIG_LEVEL_SET(AR8200_LEVEL),
 .has_get_parm =  RIG_PARM_NONE,
 .has_set_parm =  RIG_PARM_NONE,    /* FIXME: parms */
-.level_gran =  {},                 /* FIXME: granularity */
+.level_gran =  {
+        [LVL_ATT] = { .min = { .i = 0 }, .max = { .i = 20 }, .step = { .i = 20 } }
+    },                 /* FIXME: granularity */
 .parm_gran =  {},
 .ctcss_list =  NULL,				/* FIXME: CTCSS list */
 .dcs_list =  NULL,
diff --git a/bindings/ignore.swg b/bindings/ignore.swg
index d295659..7c284aa 100644
--- a/bindings/ignore.swg
+++ b/bindings/ignore.swg
@@ -158,7 +158,6 @@
 %ignore rig_token_lookup;
 %ignore rig_close;
 %ignore rig_cleanup;
-%ignore rig_probe;
 %ignore rig_set_ant;
 %ignore rig_get_ant;
 %ignore rig_has_get_level;
diff --git a/bindings/rig.swg b/bindings/rig.swg
index f54b984..2f1c5dc 100644
--- a/bindings/rig.swg
+++ b/bindings/rig.swg
@@ -80,6 +80,8 @@ typedef channel_t * const_channel_t_p;
 #define METHOD1VGET(f, t1) t1 f (vfo_t vfo = RIG_VFO_CURR) \
 				{ t1 _##t1; self->error_status = rig_##f(self->rig, vfo, &_##t1); return _##t1; }
 
+#define METHOD_GET(f, t1, t2) t1 f (t2 arg) \
+        { return rig_##f(self->rig, arg); }
 
 #define METHODSIMPLESET(f, t1, fld, chk) void set_##f (setting_t stg, t1 fld  _VFO_DECL) \
 		{ value_t val; 	if (chk) {	\
@@ -222,6 +224,7 @@ typedef channel_t * const_channel_t_p;
 /*
  * Rig class alike
  */
+%include "idx_builtin.h"
 %extend Rig {
 
 #ifndef SWIG_CSTRING_UNIMPL
@@ -268,6 +271,10 @@ typedef channel_t * const_channel_t_p;
 		self->error_status = rig_close(self->rig);
 	}
 
+  gran_t get_level_gran (setting_t level) {
+    return self->caps->level_gran[setting2idx_builtin(level)];
+  }
+
 	/*
 	 * group all vfo, and non vfo apart
 	 */
@@ -326,12 +333,12 @@ typedef channel_t * const_channel_t_p;
 	METHOD1(reset, reset_t)
 	METHOD1(has_scan, scan_t)
 	METHOD1(has_vfo_op, vfo_op_t)
-	METHOD1(passband_normal, rmode_t)
-	METHOD1(passband_narrow, rmode_t)
-	METHOD1(passband_wide, rmode_t)
+	METHOD_GET(passband_normal, pbwidth_t, rmode_t)
+	METHOD_GET(passband_narrow, pbwidth_t, rmode_t)
+	METHOD_GET(passband_wide, pbwidth_t, rmode_t)
 
-	METHOD1(ext_token_lookup, const_char_string)	/* level & parm */
-	METHOD1(token_lookup, const_char_string)	/* conf */
+	METHOD_GET(ext_token_lookup, token_t, const_char_string)	/* level & parm */
+	METHOD_GET(token_lookup, token_t, const_char_string)	/* conf */
 
 	METHOD2(set_conf, token_t, const_char_string)
 	METHOD2(set_ext_parm, token_t, value_t)
@@ -476,11 +483,17 @@ typedef channel_t * const_channel_t_p;
 
 #ifndef SWIGJAVA
 	/* TODO */
-	void get_level(setting_t level, vfo_t vfo = RIG_VFO_CURR)
+	value_t get_level(setting_t level, vfo_t vfo = RIG_VFO_CURR)
 		{ value_t val; self->error_status = rig_get_level(self->rig, vfo, level, &val);
 			//if (RIG_LEVEL_IS_FLOAT(level))
 			/* TODO: dynamic casting */
+      return val;
 		}
+
+  signed int get_strength(vfo_t vfo = RIG_VFO_CURR)
+    { value_t val; self->error_status = rig_get_strength(self->rig, vfo, &val);
+      return val.i;
+    }
 #endif
 
 	/* TODO also: get_parm */
diff --git a/dummy/Makefile.am b/dummy/Makefile.am
index 305abbd..8d5b94c 100644
--- a/dummy/Makefile.am
+++ b/dummy/Makefile.am
@@ -1,4 +1,4 @@
-DUMMYSRC = dummy.c dummy.h rot_dummy.c rot_dummy.h netrigctl.c netrotctl.c
+DUMMYSRC = dummy.c dummy.h rot_dummy.c rot_dummy.h netrigctl.c netrotctl.c psmtest.h psmtest.c
 
 noinst_LTLIBRARIES = libhamlib-dummy.la
 libhamlib_dummy_la_SOURCES = $(DUMMYSRC)
diff --git a/dummy/dummy.c b/dummy/dummy.c
index c970c2a..88de706 100644
--- a/dummy/dummy.c
+++ b/dummy/dummy.c
@@ -1618,6 +1618,7 @@ DECLARE_INITRIG_BACKEND(dummy)
 
 	rig_register(&dummy_caps);
 	rig_register(&netrigctl_caps);
+	rig_register(&psmtest_caps);
 
 	return RIG_OK;
 }
diff --git a/dummy/dummy.h b/dummy/dummy.h
index b80f005..10cbb44 100644
--- a/dummy/dummy.h
+++ b/dummy/dummy.h
@@ -38,5 +38,6 @@
 
 extern const struct rig_caps dummy_caps;
 extern const struct rig_caps netrigctl_caps;
+extern const struct rig_caps psmtest_caps;
 
 #endif /* _DUMMY_H */
diff --git a/dummy/psmtest.c b/dummy/psmtest.c
new file mode 100644
index 0000000..d9a8690
--- /dev/null
+++ b/dummy/psmtest.c
@@ -0,0 +1,409 @@
+/*
+ *  Ofcom PSM test backend
+ *  Copyright (c) 2016 by Tom Winch
+ *
+ *
+ *   This library is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU Lesser General Public
+ *   License as published by the Free Software Foundation; either
+ *   version 2.1 of the License, or (at your option) any later version.
+ *
+ *   This library is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *   Lesser General Public License for more details.
+ *
+ *   You should have received a copy of the GNU Lesser General Public
+ *   License along with this library; if not, write to the Free Software
+ *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>  /* String function definitions */
+#include <unistd.h>  /* UNIX standard function definitions */
+#include <math.h>
+#include <time.h>
+
+#include "hamlib/rig.h"
+#include "serial.h"
+#include "parallel.h"
+#include "misc.h"
+#include "tones.h"
+#include "idx_builtin.h"
+#include "register.h"
+
+#include "psmtest.h"
+
+#define NB_CHAN 22		/* see caps->chan_list */
+
+struct psmtest_priv_data {
+		powerstat_t powerstat;
+		channel_t vfo_a;
+};
+
+/* levels pertain to each VFO */
+static const struct confparams psmtest_ext_levels[] = {	{ RIG_CONF_END, NULL, } };
+
+/* parms pertain to the whole rig */
+static const struct confparams psmtest_ext_parms[] = { { RIG_CONF_END, NULL, } };
+
+/* cfgparams are configuration item generally used by the backend's open() method */
+static const struct confparams psmtest_cfg_params[] = {
+	{ TOK_CFG_MAGICCONF, "mcfg", "Magic conf", "Magic parameter, as an example", "DX", RIG_CONF_STRING, { } },
+	{ RIG_CONF_END, NULL, }
+};
+
+/********************************************************************/
+
+static void init_chan(RIG *rig, vfo_t vfo, channel_t *chan)
+{
+  chan->channel_num = 0;
+  chan->vfo = vfo;
+  strcpy(chan->channel_desc, rig_strvfo(vfo));
+
+  chan->freq = MHz(87.5);
+  chan->mode = RIG_MODE_WFM;
+  chan->width = rig_passband_normal(rig, RIG_MODE_WFM);
+  chan->tx_freq = chan->freq;
+  chan->tx_mode = chan->mode;
+  chan->tx_width = chan->width;
+  chan->split = RIG_SPLIT_OFF;
+
+  chan->rptr_shift = RIG_RPT_SHIFT_NONE;
+  chan->rptr_offs = 0;
+  chan->ctcss_tone = 0;
+  chan->dcs_code = 0;
+  chan->ctcss_sql = 0;
+  chan->dcs_sql = 0;
+  chan->rit = 0;
+  chan->xit = 0;
+  chan->tuning_step = 0;
+  chan->ant = 0;
+
+  chan->funcs = (setting_t)0;
+  memset(chan->levels, 0, RIG_SETTING_MAX*sizeof(value_t));
+}
+
+static int psmtest_init(RIG *rig)
+{
+  struct psmtest_priv_data *priv;
+
+  priv = (struct psmtest_priv_data*)malloc(sizeof(struct psmtest_priv_data));
+  if (!priv) return -RIG_ENOMEM;
+  rig->state.priv = (void*)priv;
+
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called\n", __FUNCTION__);
+  rig->state.rigport.type.rig = RIG_PORT_NONE;
+
+  priv->powerstat = RIG_POWER_ON;
+
+  init_chan(rig, RIG_VFO_A, &priv->vfo_a);
+
+  return RIG_OK;
+}
+
+static int psmtest_cleanup(RIG *rig)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called\n", __FUNCTION__);
+
+  if (rig->state.priv) free(rig->state.priv);
+
+  rig->state.priv = NULL;
+
+  return RIG_OK;
+}
+
+static int psmtest_open(RIG *rig)
+{
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called\n", __FUNCTION__);
+
+  return RIG_OK;
+}
+
+static int psmtest_close(RIG *rig)
+{
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called\n", __FUNCTION__);
+
+  return RIG_OK;
+}
+
+static int psmtest_set_freq(RIG *rig, vfo_t vfo, freq_t freq)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+  char fstr[20];
+
+  sprintf_freq(fstr, freq);
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called: %s %s\n", __FUNCTION__,
+ 			rig_strvfo(vfo), fstr);
+  priv->vfo_a.freq = freq;
+
+  return RIG_OK;
+}
+
+
+static int psmtest_get_freq(RIG *rig, vfo_t vfo, freq_t *freq)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called: %s\n", __FUNCTION__, rig_strvfo(vfo));
+
+  *freq = priv->vfo_a.freq;
+
+  return RIG_OK;
+}
+
+
+static int psmtest_set_mode(RIG *rig, vfo_t vfo, rmode_t mode, pbwidth_t width)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+  char buf[16];
+
+  sprintf_freq(buf, width);
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called: %s %s %s\n", __FUNCTION__,
+  		rig_strvfo(vfo), rig_strrmode(mode), buf);
+
+  priv->vfo_a.mode = mode;
+
+  if (RIG_PASSBAND_NOCHANGE == width) return RIG_OK;
+
+  if (width == RIG_PASSBAND_NORMAL)
+    priv->vfo_a.width = rig_passband_normal(rig, mode);
+  else
+    priv->vfo_a.width = width;
+
+  return RIG_OK;
+}
+
+
+static int psmtest_get_mode(RIG *rig, vfo_t vfo, rmode_t *mode, pbwidth_t *width)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called: %s\n", __FUNCTION__, rig_strvfo(vfo));
+
+  *mode = priv->vfo_a.mode;
+  *width = priv->vfo_a.width;
+
+  return RIG_OK;
+}
+
+
+static int psmtest_set_level(RIG *rig, vfo_t vfo, setting_t level, value_t val)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+  int idx;
+  char lstr[32];
+
+  idx = rig_setting2idx(level);
+  if (idx >= RIG_SETTING_MAX)
+      return -RIG_EINVAL;
+
+  priv->vfo_a.levels[idx] = val;
+
+  if (RIG_LEVEL_IS_FLOAT(level))
+		  sprintf(lstr, "%f", val.f);
+  else
+		  sprintf(lstr, "%d", val.i);
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called: %s %s\n",__FUNCTION__,
+				  rig_strlevel(level), lstr);
+
+  return RIG_OK;
+}
+
+/* compute the value of the Gaussian height 'amp', position 'f0', width 'fw' at x='freq' */
+static signed int _psmtest_gaussian(freq_t freq, freq_t f0, freq_t fw, signed int amp) {
+  freq_t df2 = pow((freq - f0), 2);
+  freq_t f2w2 = 2 * fw * fw;
+  return amp * exp(-df2 / f2w2);
+}
+
+
+static int psmtest_get_level(RIG *rig, vfo_t vfo, setting_t level, value_t *val)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+  int idx;
+
+  idx = rig_setting2idx(level);
+
+  if (idx >= RIG_SETTING_MAX)
+      return -RIG_EINVAL;
+
+  if (level == RIG_LEVEL_STRENGTH || level == RIG_LEVEL_RAWSTR) {
+    usleep(20000);
+
+  	int qrm = -50;
+    qrm += _psmtest_gaussian(priv->vfo_a.freq, MHz(91.4), MHz(0.1), 80);
+    qrm += _psmtest_gaussian(priv->vfo_a.freq, MHz(96.1), MHz(0.1), 90);
+    qrm += _psmtest_gaussian(priv->vfo_a.freq, MHz(100.0), MHz(0.1), 76);
+    qrm += _psmtest_gaussian(priv->vfo_a.freq, MHz(102.3), MHz(0.1), 68);
+
+    /* make S-Meter jiggle */
+  	priv->vfo_a.levels[idx].i = qrm + rand()%4
+      - priv->vfo_a.levels[LVL_ATT].i
+      + priv->vfo_a.levels[LVL_PREAMP].i;
+  }
+
+  *val = priv->vfo_a.levels[idx];
+  rig_debug(RIG_DEBUG_VERBOSE,"%s called: %s\n",__FUNCTION__,
+				  rig_strlevel(level));
+
+  return RIG_OK;
+}
+
+
+static int psmtest_set_powerstat(RIG *rig, powerstat_t status)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+
+  rig_debug(RIG_DEBUG_VERBOSE, "%s called\n", __FUNCTION__);
+  priv->powerstat = status;
+
+  return RIG_OK;
+}
+
+
+static int psmtest_get_powerstat(RIG *rig, powerstat_t *status)
+{
+  struct psmtest_priv_data *priv = (struct psmtest_priv_data *)rig->state.priv;
+
+  *status = priv->powerstat;
+  rig_debug(RIG_DEBUG_VERBOSE, "%s called\n", __FUNCTION__);
+
+  return RIG_OK;
+}
+
+static void chan_vfo(channel_t *chan, vfo_t vfo)
+{
+	chan->vfo = vfo;
+	strcpy(chan->channel_desc, rig_strvfo(vfo));
+}
+
+
+static const char *psmtest_get_info(RIG *rig)
+{
+  rig_debug(RIG_DEBUG_VERBOSE, "%s called\n", __FUNCTION__);
+
+  return "PSM test rig";
+}
+
+
+/*
+ * PSM test rig capabilities.
+ */
+
+/*
+ * The following macros set bitmasks for the various funcs, levels, parms,
+ * etc.  This psmtest backend claims support for almost all of them.
+ */
+#define PSMTEST_FUNC    0
+#define PSMTEST_LEVEL   RIG_LEVEL_STRENGTH | RIG_LEVEL_RAWSTR | RIG_LEVEL_ATT | RIG_LEVEL_PREAMP
+#define PSMTEST_PARM    0
+
+#define PSMTEST_VFO_OP  0
+#define PSMTEST_SCAN    0
+
+#define PSMTEST_VFOS    RIG_VFO_A
+#define PSMTEST_MODES   RIG_MODE_WFM
+
+#define PSMTEST_MEM_CAP {    \
+	.bank_num = 1,	\
+	.vfo = 1,	\
+	.ant = 1,	\
+	.freq = 1,	\
+	.mode = 1,	\
+	.width = 1,	\
+	.tx_freq = 1,	\
+	.tx_mode = 1,	\
+	.tx_width = 1,	\
+	.split = 1,	\
+	.rptr_shift = 1,	\
+	.rptr_offs = 1,	\
+	.tuning_step = 1,	\
+	.rit = 1,	\
+	.xit = 1,	\
+	.funcs = PSMTEST_FUNC,	\
+	.levels = RIG_LEVEL_SET(PSMTEST_LEVEL),	\
+	.ctcss_tone = 1,	\
+	.ctcss_sql = 1,	\
+	.dcs_code = 1,	\
+	.dcs_sql = 1,	\
+	.scan_group = 1,	\
+	.flags = 1,	\
+	.channel_desc = 1,	\
+	.ext_levels = 1,	\
+	}
+
+const struct rig_caps psmtest_caps = {
+  .rig_model =      RIG_MODEL_PSMTEST,
+  .model_name =     "PSM Test",
+  .mfg_name =       "Ofcom",
+  .version =        "0.1",
+  .copyright =      "LGPL",
+  .status =         RIG_STATUS_BETA,
+  .rig_type =       RIG_TYPE_OTHER,
+  .targetable_vfo = 0,
+  .ptt_type =       RIG_PTT_NONE,
+  .dcd_type =       RIG_DCD_RIG,
+  .port_type =      RIG_PORT_NONE,
+  .has_get_func =   PSMTEST_FUNC,
+  .has_set_func =   PSMTEST_FUNC,
+  .has_get_level =  PSMTEST_LEVEL,
+  .has_set_level =  RIG_LEVEL_SET(PSMTEST_LEVEL),
+  .has_get_parm = 	PSMTEST_PARM,
+  .has_set_parm = 	RIG_PARM_SET(PSMTEST_PARM),
+  .level_gran =		  { [LVL_CWPITCH] = { .step = { .i = 10 } } },
+  .ctcss_list = 	  common_ctcss_list,
+  .dcs_list =   	  full_dcs_list,
+  .chan_list = 	    { RIG_CHAN_END },
+  .scan_ops =       PSMTEST_SCAN,
+  .vfo_ops =        PSMTEST_VFO_OP,
+  .transceive =     RIG_TRN_OFF,
+  .attenuator =     { 10, RIG_DBLST_END, },
+  .preamp =         { 10, RIG_DBLST_END, },
+  .rx_range_list1 = { {.start=kHz(150),.end=MHz(1500),.modes=PSMTEST_MODES,
+                      .low_power=-1,.high_power=-1,PSMTEST_VFOS, RIG_ANT_1|RIG_ANT_2},
+                      RIG_FRNG_END, },
+  .tx_range_list1 = { RIG_FRNG_END, },
+  .rx_range_list2 = { {.start=kHz(150),.end=MHz(1500),.modes=PSMTEST_MODES,
+                      .low_power=-1,.high_power=-1,PSMTEST_VFOS, RIG_ANT_1|RIG_ANT_2},
+                      RIG_FRNG_END, },
+  .tx_range_list2 = { RIG_FRNG_END, },
+  .tuning_steps =   { {PSMTEST_MODES,1}, {PSMTEST_MODES,RIG_TS_ANY}, RIG_TS_END, },
+  .filters =        {	{RIG_MODE_SSB|RIG_MODE_CW|RIG_MODE_RTTY, kHz(2.4)},
+                      {RIG_MODE_WFM, kHz(230)},
+                      RIG_FLT_END,
+                    },
+  .max_rit = 9990,
+  .max_xit = 9990,
+  .max_ifshift = 10000,
+  .priv =  NULL,	/* priv */
+
+  .extlevels =      psmtest_ext_levels,
+  .extparms =       psmtest_ext_parms,
+  .cfgparams =      psmtest_cfg_params,
+
+  .rig_init =       psmtest_init,
+  .rig_cleanup =    psmtest_cleanup,
+  .rig_open =       psmtest_open,
+  .rig_close =      psmtest_close,
+
+  .set_freq =       psmtest_set_freq,
+  .get_freq =       psmtest_get_freq,
+  .set_mode =       psmtest_set_mode,
+  .get_mode =       psmtest_get_mode,
+
+  .set_powerstat =  psmtest_set_powerstat,
+  .get_powerstat =  psmtest_get_powerstat,
+  .set_level =      psmtest_set_level,
+  .get_level =      psmtest_get_level,
+
+  .get_info =       psmtest_get_info,
+};
diff --git a/dummy/psmtest.h b/dummy/psmtest.h
new file mode 100644
index 0000000..c70028d
--- /dev/null
+++ b/dummy/psmtest.h
@@ -0,0 +1,30 @@
+/*
+ *  Hamlib Dummy backend - main header
+ *  Copyright (c) 2001-2009 by Stephane Fillod
+ *
+ *
+ *   This library is free software; you can redistribute it and/or
+ *   modify it under the terms of the GNU Lesser General Public
+ *   License as published by the Free Software Foundation; either
+ *   version 2.1 of the License, or (at your option) any later version.
+ *
+ *   This library is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *   Lesser General Public License for more details.
+ *
+ *   You should have received a copy of the GNU Lesser General Public
+ *   License along with this library; if not, write to the Free Software
+ *   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+
+#ifndef _PSMTEST_H
+#define _PSMTEST_H 1
+
+#include "token.h"
+
+/* backend conf */
+#define TOK_CFG_MAGICCONF  TOKEN_BACKEND(1)
+
+#endif /* _PSMTEST_H */
diff --git a/include/hamlib/riglist.h b/include/hamlib/riglist.h
index 6edf78e..3bcf4d5 100644
--- a/include/hamlib/riglist.h
+++ b/include/hamlib/riglist.h
@@ -56,6 +56,7 @@
 #define RIG_MODEL_DUMMY RIG_MAKE_MODEL(RIG_DUMMY, 1)
 #define RIG_MODEL_NETRIGCTL RIG_MAKE_MODEL(RIG_DUMMY, 2)
 #define RIG_MODEL_ARMSTRONG RIG_MAKE_MODEL(RIG_DUMMY, 3)
+#define RIG_MODEL_PSMTEST RIG_MAKE_MODEL(RIG_DUMMY, 4)
 
 	/*
 	 * Yaesu
